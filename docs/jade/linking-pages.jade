extend _base

block content
  div.docs-wrap
    include _sidenav
    div.docs-content
      h1 Navigation and linking between pages in Framework7
      p Now, when we have our App structure with Views and Pages we need to understand how we can create new pages and how they should be loaded by Framework7.
      p Here is important rule that you should remember:
      div.important-note.
        <p><b>By default Framework7 will load all links using Ajax</b>, except links with additional <b>external</b> class (<b>&lt;a href="somepage.html" class="external"></b>) and links with not correct <b>href</b> attribute (when it is <b>empty</b> or <b>#</b>).
        <p>This behavior could be changed by passing <b>ajaxLinks</b> parameter on <a href="init-app.html">App initialization</a>
      p So it is seems to be simple and if we want to create link to page which is in <code>about.html</code> file we just need to write usual <code>&lt;a&gt;</code> tag:
      pre <code>&lt;a href="about.html"&gt;Go to About page&lt;/a&gt;</code>
      p When we click on this link, Framework7 will send Ajax request to <code>about.html</code>, parse it, insert to DOM and run animated transition to this new page.
      h2 Internal file structure with Page
      p Because Framework7 has pretty smart parser we don't need full HTML layout (with HTML head, body, views, pages, etc.) in internal pages. Let's look on the structure of this internal <code>about.html</code> file:
      pre
        code.
          &lt;-- That is all we have in about.html file --&gt;
          &lt;div class="page" data-page="about"&gt;
          ... About page content goes here
          &lt;/div&gt;
      p The point is that Framework7's parser will try to find only <code>&lt;div class="page"&gt;</code> element in Ajax loaded page, so we don't need here full HTML layout, just the page. This is not restriction and of course, if you need here full HTML layout it will also work fine.
      h2 Internal file structure with few Pages
      p Here is a bit complex situation. For example, we have two (or more) <a href="views.html">initialized Views</a> with separate navigation. In our index file:
      pre
        code.
          &lt;body&gt;
            ...
            &lt;!-- Views --&gt;
            &lt;div class="views"&gt;
              &lt;!-- Left view --&gt;
              &lt;div class="view view-main left-view"&gt;
                &lt;!-- Navbar--&gt;
                &lt;!-- Pages --&gt;
                  &lt;a href="about.html"&gt; About &lt;/a&gt;
                &lt;!-- Toolbar--&gt;
              &lt;/div&gt;
              &lt;!-- Right view --&gt;
              &lt;div class="view right-view"&gt;
                &lt;!-- Navbar--&gt;
                &lt;!-- Pages --&gt;
                  &lt;a href="about.html"&gt; About &lt;/a&gt;
                &lt;!-- Toolbar--&gt;
              &lt;/div&gt;          
            &lt;/div&gt;
            ...
          &lt;/body&gt;
      <p>As you see we have two views here (Left view and Right view), and both views have link to <code>about.html</code> file. And of course, we need to have different content when we click in different views.</p>
      <p>Let's look how <code>about.html</code> should look in this case:</p>
      <pre><code>&lt;!-- Left view --&gt;
      &lt;div class="view view-main left-view"&gt;
        &lt;div class="page" data-page="about-right"&gt;
          ... This page will be loaded when you click about.html link from Left view ...
        &lt;/div&gt;          
      &lt;/div&gt;
      &lt;!-- Right view --&gt;
      &lt;div class="view right-view"&gt;
        &lt;div class="page" data-page="about-right"&gt;
          ... This page will be loaded when you click about.html link from Right view ...
        &lt;/div&gt;          
      &lt;/div&gt; </code></pre>
                <p>The main point here is that page for speific View should be wrapped with <code>&lt;div class="view"&gt;</code> with the same classes as in main layout. It will help Framework7 to recognize which page is for which view.</p>
                <h2>Internal file structure with Dynamic Navbar</h2>
                <p>As you may see in <a href="navbar-toolbar-layouts.html">Nabvar & Toolbar layout types</a> dynamic navbar requires through-type layout. But in this layout type navbar is not inside of page. So here is where we need to put it in <code>about.html</code> file:</p>
      <pre><code>&lt;div class="navbar"&gt;
        ... Navbar content goes here
      &lt;/div&gt;

      &lt;div class="page" data-page="about"&gt;
        ... About page content goes here
      &lt;/div&gt;</code></pre>
      <p>The point is that we just need to put navbar with is content near with page. And if you need to have here fiew pages with different navbars, just wrap them both (page and navbar) with appropriate views like in previous example.</p>
      <h2>Going back in navigation</h2>
      <p>Ok, we already know how to load pages, but how can we get back to the previous page with reverse transition.</p>
      <p>It is actually super easy, all we need is just to add <b>back</b> class to link. Here is the structure of <code>about.html</code> page with back link to home <code>index.html</code> page:</p>
      <pre><code>&lt;div class="page" data-page="about"&gt;
        &lt;-- Just add additional "back" class to link --&gt;
        &lt;a href="index.html" class="back"&gt; Go back to home page &lt;/a&gt;
      &lt;/div&gt;</code></pre>
      <p>Here are few important notes about <code>href</code> attribute in "back" links:</p>
      <div class="important-note">
        <ul>
          <li>
            <p>If there are pages in navigation history Framework7 will always <b>ignore url in "href"</b> attribute</p>
          </li>
          <li>
            <p>If there are no pages in navigation history (for example, when you have "back" link on first home page) Framework7 will load page from "href" attribute</p>
          </li>
          <p>This behavior can not be changed because user always expect to get previous page when he clicks on "back" link, not something else.</p>
        </ul>
      </div>
      <p>As you see <code>href</code> attribute is not required for "back" link, but try to keep it there for fallback.</p>
      <h2>Swipe back</h2>
      <p>If you have enabled "swipeBackPage" <a href="init-app.html">App parameter</a> then you can also go to previous page by swiping from left to right from the left edge of the screen. But sometimes you may need to disable this behavior for some specific pages. In this case you may add additional <b>no-swipeback</b> class:</p>
      <pre><code>&lt;div class="page no-swipeback"&gt;
          ...
      &lt;/div&gt;             </code></pre>
      <h2>Load pages / Go back without animation</h2>
      <p>Sometimes you may need to load new page or go back immediately, without animated page transition. For this case we need to add addional "no-animation" class to link (or back link):</p>
      <pre><code>&lt;div class="page" data-page="about"&gt;
        &lt;-- Add additional "no-anmation" class to link to diable animated page transition --&gt;
        &lt;a href="about.html" class="no-animation"&gt; Load About page immediately &lt;/a&gt;

        &lt;-- The same rule for back link --&gt;
        &lt;a href="index.html" class="back no-animation"&gt; Go back immediately &lt;/a&gt;
      &lt;/div&gt;</code></pre>
      <h2>Load pages using JavaScript</h2>
      <p>It is possible to load page from HTML files using JavaScript, not only using <code>&lt;a&gt;</code> tags. For this case we need to use <code>.loadPage(url)</code> <a href="views.html">View's</a> method:</p>
      <pre><code>// Initialize App  
      var myApp = new Framework7();

      // Initialize View          
      var mainView = myApp.addView('.view-main')          

      // Load page from about.html file to main View:
      mainView.loadPage('about.html');</code></pre>
      <p>Note, that it is only possible for Views that were initialized</p>
      <h2>Going back using JavaScript</h2>
      <p>You can also get the same as when you click "back" link but with JavaScript using <code>.goBack(url)</code> <a href="views.html">View's</a> method:</p>
      <pre><code>// Initialize App  
      var myApp = new Framework7();

      // Initialize View          
      var mainView = myApp.addView('.view-main')          

      // Go back on main View
      mainView.goBack();</code></pre>
      <p>It is also possible only for Views that were initialized</p>
      <h2>Conclusion</h2>
      <p>As you may see linking and navigation in Framework7 is pretty simple, all you should remember is that:</p>
      <ul>
        <li>
          <p>you need to use usual <code>&lt;a&gt;</code> tags with plain "href" attribute that contains url of required file with page</p>
        </li>
        <li>
          <p>it is not required to have full HTML layout in pages loaded with Ajax. Just put there <b>&lt;div class="page"&gt;</b> (and <b>&lt;div class="navbar"&gt;</b> in case of Dynamic Navbar)</p>
        </li>
        <li>
          <p>if you need to have few pages in single file - wrap them with <b>&lt;div class="view"&gt;</b> with appropriate classes for each view</p>
        </li>
        <li>
          <p>just add "back" class to any link (<b>&lt;a href="index.html" class="back"&gt;</b>) to make it work like "back" link</p>
        </li>
      </ul>
      <h2>What's next</h2>
      <p>Let's look at how to make <a href="linking-views.html">linking between Views</a></p>
